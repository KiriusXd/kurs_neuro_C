#include "reg_control_595.h"
#include "gpio_control.h"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

// Структура для хранения состояния регистров и линий GPIO
struct RegControl595 {
    struct gpiod_line *shcp;  // GPIO23: SCLK_R
    struct gpiod_line *stcp;  // GPIO24: CS_R
    struct gpiod_line *ds;    // GPIO16: MOSI_R
    struct gpiod_line *wr_ldac; // GPIO12
    struct gpiod_line *adc_cs;  // GPIO25
    struct gpiod_line *adc_spdt; // GPIO26
    struct gpiod_line *mvm_dac_cs[4]; // GPIO5,6,7,8
    struct gpiod_line *mvm_ldac; // GPIO4
    struct gpiod_line *wl_mux_en; // GPIO13
    struct gpiod_line *wl_mux[3]; // GPIO17,27,22
    struct gpiod_line *buzzer; // GPIO21
    struct gpiod_line *led;    // GPIO19
    unsigned char main_bytes[2]; // Два байта для 74HC595
};

// Инициализация структуры и GPIO
RegControl595* reg_control_595_init() {
    RegControl595 *ctrl = (RegControl595*)malloc(sizeof(RegControl595));
    if (!ctrl) {
        fprintf(stderr, "Ошибка выделения памяти\n");
        return NULL;
    }

    ctrl->main_bytes[0] = 0xf0;
    ctrl->main_bytes[1] = 0x20;

    if (gpio_init() < 0) {
        fprintf(stderr, "Ошибка инициализации GPIO\n");
        free(ctrl);
        return NULL;
    }

    // Настройка линий GPIO
    struct {
        int pin;
        struct gpiod_line **line;
        int initial_value;
    } pins[] = {
        {23, &ctrl->shcp, 0},
        {24, &ctrl->stcp, 1},
        {16, &ctrl->ds, 0},
        {12, &ctrl->wr_ldac, 1},
        {25, &ctrl->adc_cs, 1},
        {26, &ctrl->adc_spdt, 0},
        {5, &ctrl->mvm_dac_cs[0], 1},
        {6, &ctrl->mvm_dac_cs[1], 1},
        {7, &ctrl->mvm_dac_cs[2], 1},
        {8, &ctrl->mvm_dac_cs[3], 1},
        {4, &ctrl->mvm_ldac, 1},
        {13, &ctrl->wl_mux_en, 0},
        {17, &ctrl->wl_mux[0], 0},
        {27, &ctrl->wl_mux[1], 0},
        {22, &ctrl->wl_mux[2], 0},
        {21, &ctrl->buzzer, 0},
        {19, &ctrl->led, 0}
    };

    for (size_t i = 0; i < sizeof(pins)/sizeof(pins[0]); i++) {
        *(pins[i].line) = gpio_line_setup(pins[i].pin);
        if (!*(pins[i].line)) {
            fprintf(stderr, "Ошибка настройки линии GPIO%d\n", pins[i].pin);
            reg_control_595_deinit(ctrl);
            return NULL;
        }
        if (gpio_line_set(*(pins[i].line), pins[i].initial_value) < 0) {
            fprintf(stderr, "Ошибка установки начального значения GPIO%d\n", pins[i].pin);
            reg_control_595_deinit(ctrl);
            return NULL;
        }
    }

    // Имитация тройного переключения ADC_CS
    gpio_line_set(ctrl->adc_cs, 0);
    gpio_line_set(ctrl->adc_cs, 1);
    gpio_line_set(ctrl->adc_cs, 0);
    gpio_line_set(ctrl->adc_cs, 1);

    reg_update(ctrl);
    return ctrl;
}

// Деинициализация
void reg_control_595_deinit(RegControl595 *ctrl) {
    if (!ctrl) return;

    if (ctrl->shcp) gpio_line_release(ctrl->shcp);
    if (ctrl->stcp) gpio_line_release(ctrl->stcp);
    if (ctrl->ds) gpio_line_release(ctrl->ds);
    if (ctrl->wr_ldac) gpio_line_release(ctrl->wr_ldac);
    if (ctrl->adc_cs) gpio_line_release(ctrl->adc_cs);
    if (ctrl->adc_spdt) gpio_line_release(ctrl->adc_spdt);
    for (int i = 0; i < 4; i++) {
        if (ctrl->mvm_dac_cs[i]) gpio_line_release(ctrl->mvm_dac_cs[i]);
    }
    if (ctrl->mvm_ldac) gpio_line_release(ctrl->mvm_ldac);
    if (ctrl->wl_mux_en) gpio_line_release(ctrl->wl_mux_en);
    for (int i = 0; i < 3; i++) {
        if (ctrl->wl_mux[i]) gpio_line_release(ctrl->wl_mux[i]);
    }
    if (ctrl->buzzer) gpio_line_release(ctrl->buzzer);
    if (ctrl->led) gpio_line_release(ctrl->led);

    gpio_deinit();
    free(ctrl);
}

// Передача байта в 74HC595
static void transfer_595(RegControl595 *ctrl, unsigned char x) {
    x &= 0xff;
    for (int i = 0; i < 8; i++) {
        gpio_line_set(ctrl->ds, (x & (1 << (7 - i))) ? 1 : 0);
        gpio_line_set(ctrl->shcp, 1);
        gpio_line_set(ctrl->shcp, 0);
    }
    gpio_line_set(ctrl->ds, 0);
}

// Обновление регистров
void reg_update(RegControl595 *ctrl) {
    if (!ctrl) return;
    gpio_line_set(ctrl->stcp, 0);
    transfer_595(ctrl, ctrl->main_bytes[0]);
    transfer_595(ctrl, ctrl->main_bytes[1]);
    gpio_line_set(ctrl->stcp, 1);
}

// Управление BL_KEY_CS
void bl_key_cs_H(RegControl595 *ctrl, int n) {
    if (!ctrl || n < 0 || n > 3) return;
    ctrl->main_bytes[0] |= (1 << (4 + n)) & 0xff;
}
void bl_key_cs_L(RegControl595 *ctrl, int n) {
    if (!ctrl || n < 0 || n > 3) return;
    ctrl->main_bytes[0] &= (~(1 << (4 + n))) & 0xff;
}

// Установка IN_MUX
void in_mux_set(RegControl595 *ctrl, int n) {
    if (!ctrl) return;
    ctrl->main_bytes[0] &= 0xf0;
    ctrl->main_bytes[0] |= (n & 0xf);
}

// Управление WR_SPDT
void wr_spdt_H(RegControl595 *ctrl, int n) {
    if (!ctrl || n < 0 || n > 2) return;
    ctrl->main_bytes[1] |= (1 << (2 + n)) & 0xff;
}
void wr_spdt_L(RegControl595 *ctrl, int n) {
    if (!ctrl || n < 0 || n > 2) return;
    ctrl->main_bytes[1] &= (~(1 << (2 + n))) & 0xff;
}

// Управление IN_MUX_EN
void in_mux_EN_H(RegControl595 *ctrl, int n) {
    if (!ctrl || n < 0 || n > 1) return;
    ctrl->main_bytes[1] |= (1 << n) & 0xff;
}
void in_mux_EN_L(RegControl595 *ctrl, int n) {
    if (!ctrl || n < 0 || n > 1) return;
    ctrl->main_bytes[1] &= (~(1 << n)) & 0xff;
}

// Управление WR_DAC_CS
void wr_dac_cs_H(RegControl595 *ctrl) {
    if (!ctrl) return;
    ctrl->main_bytes[1] |= (1 << 5) & 0xff;
}
void wr_dac_cs_L(RegControl595 *ctrl) {
    if (!ctrl) return;
    ctrl->main_bytes[1] &= (~(1 << 5)) & 0xff;
}

// Управление WR_SPDT_COMM
void wr_spdt_comm_H(RegControl595 *ctrl) {
    if (!ctrl) return;
    ctrl->main_bytes[1] |= (1 << 6) & 0xff;
}
void wr_spdt_comm_L(RegControl595 *ctrl) {
    if (!ctrl) return;
    ctrl->main_bytes[1] &= (~(1 << 6)) & 0xff;
}

// Управление SPDT_SELECT_MODE
void spdt_select_mode_H(RegControl595 *ctrl) {
    if (!ctrl) return;
    ctrl->main_bytes[1] |= (1 << 7) & 0xff;
}
void spdt_select_mode_L(RegControl595 *ctrl) {
    if (!ctrl) return;
    ctrl->main_bytes[1] &= (~(1 << 7)) & 0xff;
}

// Управление ADC_SPDT
void spdt_select_mode_for_ADC_wr(RegControl595 *ctrl) {
    if (!ctrl) return;
    gpio_line_set(ctrl->adc_spdt, 0);
}
void spdt_select_mode_for_ADC_mvm(RegControl595 *ctrl) {
    if (!ctrl) return;
    gpio_line_set(ctrl->adc_spdt, 1);
}

// Управление buzzer
void beep_beep(RegControl595 *ctrl, float timeS) {
    if (!ctrl) return;
    gpio_line_set(ctrl->buzzer, 1);
    usleep((unsigned int)(timeS * 1000000));
    gpio_line_set(ctrl->buzzer, 0);
}

// Управление LED
void blink_blink(RegControl595 *ctrl, float timeS) {
    if (!ctrl) return;
    gpio_line_set(ctrl->led, 1);
    usleep((unsigned int)(timeS * 1000000));
    gpio_line_set(ctrl->led, 0);
}